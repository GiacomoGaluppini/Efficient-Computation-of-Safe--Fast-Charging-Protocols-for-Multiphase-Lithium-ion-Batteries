# Note: In this file, parameters ending in _c, _s, and _a refer to the
# cathode (positive electrode), separator, and anode (negative
# electrode) respectively

[Sim Params]
# Constant voltage or current or segments of one of them
# Options: CV, CC, CCsegments, CVsegments, BBcontrol
profileType = BBcontrol
# Control Constraints
V_ub=3.6
I_ub=-8
#P_ub=270
#LPOverpot_lb=0.01
#T_ub=310
#Ce_lb=930
#Ce_ub=1150
#Cs_ub=2.794e+04
ffrac_Tend=0.7
deadband=1
deltatmin=0
#use Backoff for constraint tightening?
useBackoff=true
backoffFile=backoffs.mat
#specify initial integration step for DAE solver (for stop and restart use)
initialIntStep=1e-11
#run sensitivity analysis?
useSA=false
# Battery (dis)charge c-rate (only used for CC), number of capacities / hr
# (positive for discharge, negative for charge)
Crate = -8
# Voltage cutoffs, V
Vmax = 5
Vmin = 2
# Fraction of full (dis)charge to simulate (only used for CC)
# E.g. to go from cathode filling fraction 0.1 to 0.5 with cathode
# limiting capacity and Crate>0, set cs0_c = 0.1, capFrac=0.4
capFrac = 1.00
# Battery applied voltage (only used for CV), V
Vset = 0.12
# CC/CV segments defining profile for profileType = CCsegments or CVsegments
segments = [
            (-0.3, 1),
            ]
# Ramp time to go from near-eq'm initial condition to setpoint for
# CC/CV, as a fraction of total simulation time, non-dimensional
# OR
# Ramp time to linearly transition to each new segment for
# CCsegments/CVsegments, s
#ramp time for optimal control
tramp = 0.25
# Huada: tramp means the time for charging starting from 0 to the setting cc rate, as small as possible.
#tramp = 1e-3
# Continuation directory. If false, begin a fresh simulation with the
# specified input parameters here. Otherwise, this should be the
# absolute path to the output directory of the simulation to continue.
# If continuing, keep the same input parameters as the simulation to
# continue, changing only `Sim Params` subheadings (other than Nvol
# and Npart options).
# Options: false, absolute directory path
prevDir = false
#Final time (only used for CV), [s]
tend = 0.5
# Number disc. in time
# Note time stepping is adaptive, variable-order stepping, so this
# affects only the interpolated output values, not simulation
# accuracy. The output will have all simulation values at a linear
# spacing between initial and final times with tsteps total outputs.
tsteps = 10
# Relative Tolerance
relTol = 1e-6
# Absolute Tolerance
absTol = 1e-6
# Initial Temperature throughout electrode, K
T0 = 298
#Huada: I turn off all nonisothermal options for now.
# Nonisothermal: true for heat generation throughout electrode, false
# for no heat generation
nonisothermal = true
# Random seed. Set to true to give a random seed in the simulation
# (affects noise, particle size distribution). Set to true exactly
# reproducible results -- useful for testing.
# Options: true, false
randomSeed = true
# Value of the random seed, must be an integer
seed = 0
# Data reporter: choice of mat (MATLAB), hdf5 (hdf5), or hdf5Fast (hdf5, without
# printing internal variable concentrations) files. hdf5 files
# are better for cycling, as they store less information and there is less
# opening/rewriting of files. Default is mat
dataReporter = mat 
# Series resistance, [Ohm m^2]
Rser = 0
# Cathode, anode, and separator numer disc. in x direction (volumes in electrodes)
# - Nvol_c must be >= 1
# - If Nvol_c = 1 & Nvol_a = 0 & Nvol_s = 0, simulate a single volume with no
#   separator and infinitely fast counter electrode
# - If Nvol_a = 0, simulate a Li foil electrode
Nvol_c = 50
Nvol_s = 5
Nvol_a = 5
# Number of particles per volume for cathode and anode
Npart_c = 2
Npart_a = 4
# gets active area of the elctrode
#active_area = 0.03913

[Electrodes]
# The name of the parameter file describing the cathode particles
cathode = input_params_c.cfg
# The name of the parameter file describing the anode particles
# Used only if Nvol_a > 0
anode = input_params_a.cfg
# Rate constant of the Li foil electrode, A/m^2
# Used only if Nvol_a = 0
k0_foil = 1e0
# Film resistance on the Li foil, Ohm m^2
Rfilm_foil = 0e-0

[Particles]
# electrode particle size distribution info, m
#   C3 -- size along [100] direction
#   sphere or cylinder -- radius
# If using stddev = 0, set Npart = 1 for that electrode to avoid
# wasting computational effort.
# Huada: Two distribution available, Weibull and Lognormal
# Huada: I notice it is typical for graphite following Weibull.
distribution_c = Lognormal
mean_c = 100e-9
#stddev_c = 0
stddev_c = 20e-9
distribution_a = Weibull
mean_a = 6e-6
#stddev_a = 0
stddev_a = 2.0
# Initial electrode filling fractions
# (for disch, anode starts full, cathode starts empty)
cs0_c = 0.83
cs0_a = 0.01

[Conductivity]
# Simulate bulk cathode conductivity (Ohm's Law)?
# Options: true, false
# Huada: cell always has Ohm resistance due to various reason.
# Huada: and it is important for high rate.
simBulkCond_c = true
simBulkCond_a = true
# Dimensional conductivity (used if simBulkCond = true), S/m
sigma_s_c = 0.1
sigma_s_a = 50.0
# Simulate particle connectivity losses (Ohm's Law)?
# Options: true, false
simPartCond_c = false
simPartCond_a = false
# Conductance between particles, S = 1/Ohm
G_mean_c = 4e-8
G_stddev_c = 4e-8
G_mean_a = 4e-8
G_stddev_a = 4e-8

[Thermal Parameters]
# Heat capacity of anode, cathode, electrolyte material in J/(kg*K).
cp_c = 700
cp_l = 700
cp_a = 700
# Mass density of anode, cathode, and electrolyte material in kg/m^3.
rhom_c = 3360
rhom_l = 1200
rhom_a = 2202
# Heat transfer coefficient with the cell separator (W/(m^2*K))
h_h = 1.0
# Thermal conductivity in battery cell (W/(m*K)).
k_h_c = 2.1
k_h_a = 1.7
k_h_s = 0.16 
# Conductivity in electrolyte solution (only used for dilute electrolyte model), (S/m)
# For Stefan-Maxwell concentrated electrolyte, input from props_elyte.py
sigma_l = 500
# Includes temperature dependence of entropic heat generation if true, does not include
# if false
ent_heat_gen = false

[Geometry]
# Thicknesses, m
L_c = 79e-6
L_s = 25e-6
L_a = 38e-6
# Volume loading percents of active material (volume fraction of solid
# that is active material)
P_L_c = 0.84
P_L_a = 0.9
# Porosities (liquid volume fraction in each region)
poros_c = 0.562
poros_a = 0.414
poros_s = 0.4
# Bruggeman exponent (tortuosity = porosity^bruggExp)
# Huada: my experience for graphite is about -1.0 to -1.5
BruggExp_c = -1.5
BruggExp_a = -1.5
BruggExp_s = -1.5

[Electrolyte]
# Initial electrolyte conc., mol/m^3
c0 = 1100
# Cation/anion charge number (e.g. 2, -1 for CaCl_2)
zp = 1
zm = -1
# Cation/anion dissociation number (e.g. 1, 2 for CaCl_2)
nup = 1
num = 1
# Electrolyte model,
# Options: dilute, SM
#   dilute: assume dilute, binary electrolyte model; phi in
#   electrolyte is an "inner potential" or an "quasi-electrostatic
#   potential"
#   SM: use Stefan-Maxwell model for electrolyte transport; phi in
#   electrolyte is that measured with a Li metal reference electrode
#   relative to some fixed position in solution.
# WARNING: Using SM model with BV reaction models for electrode
# particles assumes individual ion activities are given by their
# concentrations for the reaction rate exchange current density.
# Huada: I suggest for SM because it is concentrated electrolyte. 
elyteModelType = SM
# Stefan-Maxwell property set, see props_elyte.py file
# Options:
#   test1: parameter set for testing
#   LiClO4_PC: electrolyte/solvent used in Fuller, Doyle, Newman 1994
#              conductivity taken from dualfoil5.2.f
#   valoen_bernardi: LiPF6 in carbonates as in Bernardi and Go 2011
#   Huada: This set is good for carbonate eletrolyte. 
SMset = valoen_bernardi
# Reference electrode (defining the electrolyte potential) information:
# number of electrons transfered in the reaction, 1 for Li/Li+
n = 1
# Stoichiometric coefficient of cation, -1 for Li/Li+
sp = -1
# Dilute solution properties (used only if elyteModelType = "dilute")
# Cation/anion diff, m^2/s
# e.g. for LiPF6 in EC/DMC, Dp = 2.2e-10, Dm = 2.94e-10
Dp = 2.2e-10
Dm = 2.94e-10
